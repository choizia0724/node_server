// Jenkinsfile (간단한 예시)
pipeline {
    agent any // 어떤 Jenkins 에이전트(작업자)든 사용

    stages {
        stage('Checkout Code') { // 1단계: 코드 체크아웃 (Git 연동 시 자동으로 됨)
            steps {
                echo 'Checking out code...'
                // 여기서 SCM (Git)에서 코드를 가져옵니다.
                // Pipeline script from SCM을 사용하면 Jenkins가 자동으로 처리
                // sh 'git clone <your-repo-url>' // 수동으로 한다면 이런 식
            }
        }
        stage('Build') { // 2단계: 애플리케이션 빌드 (예: Node.js)
            steps {
                echo 'Building the application...'
                // 여기에 실제 백엔드 빌드 명령어를 넣습니다.
                // 예: Node.js 프로젝트의 경우
                // sh 'npm install'
                // sh 'npm run build' // 또는 'yarn install', 'yarn build'

                // 예: Java Maven 프로젝트의 경우
                // sh 'mvn clean package'

                // 예: Python 프로젝트의 경우
                // sh 'pip install -r requirements.txt'
                // sh 'python manage.py collectstatic --noinput'
            }
        }
        stage('Build Docker Image') { // 3단계: Docker 이미지 빌드
            steps {
                echo 'Building Docker image...'
                // 프로젝트 루트에 Dockerfile이 있다고 가정
                // Jenkins 컨테이너는 호스트의 Docker 데몬에 접근할 수 있습니다.
                sh 'docker build -t my-backend-app:latest .'
                sh 'docker images' // 빌드된 이미지 확인
            }
        }
        stage('Deploy to Kubernetes') { // 4단계: Kubernetes에 배포
            steps {
                echo 'Deploying to Kubernetes...'
                // Kubernetes YAML 파일을 적용합니다.
                // 프로젝트 루트에 kubernetes/deployment.yaml 파일이 있다고 가정
                sh 'kubectl apply -f kubernetes/deployment.yaml'
                sh 'kubectl get pods' // 배포된 Pod 확인
            }
        }
    }

    post { // 빌드 후 처리
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Build successful!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}